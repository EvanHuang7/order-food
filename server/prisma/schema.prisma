generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  Pending
  Accepted
  Preparing
  PickedUp
  Delivered
  Cancelled
}

enum PaymentStatus {
  Pending
  Paid
  Refunded
  Failed
}

enum NotificationType {
  FoodDelivered
  NewMenuItemInFavoriteRest
  SubscribeApp
}

//TODO: Rewrite the seed data json files if need to seed data
model Customer {
  id            Int          @id @default(autoincrement())
  cognitoId     String       @unique
  name          String
  email         String       @unique
  phoneNumber   String
  profileImgUrl String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt

  locationId    Int?          @unique
  location      Location?     @relation(fields: [locationId], references: [id]) // 1-to-1: Customer has one unique Location (optional when creating new customer)
  notificationSetting      NotificationSetting? // 1-to-1: Customer has one unique NotificationSetting(optional when creating new customer)
  paymentInfo   PaymentInfo? // 1-to-1: Customer has one PaymentInfo (optional when creating new customer)

  payments      Payment[]    // 1-to-many: Customer has many Payments
  orders        Order[]      // 1-to-many: Customer has many Orders
  favoriteRests FavoriteRestaurant[] // many-to-many via join table FavoriteRestaurant
  notifications Notification[] // 1-to-many: Customer can have many Notifications
}

model Restaurant {
  id          Int       @id @default(autoincrement())
  cognitoId   String    @unique
  name        String
  email       String    @unique
  phoneNumber String
  profileImgUrl String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt

  openTime    String?    // e.g. "09:00"
  closeTime   String?    // e.g. "21:00"
  description String?
  categories  String[]  @default([])  // array of category names as strings
  photoUrls   String[]  @default([])

  locationId    Int?       @unique
  location      Location?         @relation(fields: [locationId], references: [id]) // 1-to-1: Restaurant has one unique Location
  menuItems     MenuItem[]       // 1-to-many: Restaurant has many MenuItems
  orders        Order[]          // 1-to-many: Restaurant has many Orders
  favoriteBy    FavoriteRestaurant[] // many-to-many inverse relation for customers who favorited this restaurant
}

model Driver {
  id          Int      @id @default(autoincrement())
  cognitoId   String   @unique
  name        String
  email       String   @unique
  phoneNumber String
  profileImgUrl String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt

  orders      Order[]  // 1-to-many: Driver has many Orders
}

model MenuItem {
  id           Int       @id @default(autoincrement())
  restaurantId Int
  name         String
  price        Float
  description  String?
  photoUrl     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt
  
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id]) // many-to-1: Many MenuItems belong to one Restaurant
  orderItems   OrderItem[] // 1-to-many: MenuItem can appear in many OrderItems
}

model Order {
  id           Int        @id @default(autoincrement())
  customerId   Int
  restaurantId Int 
  paymentId    Int
  driverId     Int?
  totalPrice   Float
  status       OrderStatus
  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt

  customer     Customer   @relation(fields: [customerId], references: [id]) // many-to-1: Many Orders belong to one Customer
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id]) // many-to-1: Many Orders belong to one Restaurant
  driver       Driver?    @relation(fields: [driverId], references: [id]) // many-to-1 (optional): Many Orders may belong to one Driver
  items        OrderItem[] // 1-to-many: Order has many OrderItems
  payment      Payment  @relation(fields: [paymentId], references: [id])    // many-to-1 Many Orders belong to one Payments
}

model OrderItem {
  id         Int      @id @default(autoincrement())
  orderId    Int
  menuItemId Int
  quantity   Int
  price      Float
  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt

  order      Order    @relation(fields: [orderId], references: [id]) // many-to-1: Many OrderItems belong to one Order
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id]) // many-to-1: Many OrderItems refer to one MenuItem
}

model PaymentInfo {
  id             Int    @id @default(autoincrement())
  customerId     Int    @unique
  provider       String // e.g., "Stripe"
  methodToken    String // e.g., Stripe's payment_method ID
  brand          String // e.g., "Visa/MasterCard"
  last4          String // e.g., "last 4 number of card"
  expiryMonth    String
  expiryYear     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt

  customer        Customer  @relation(fields: [customerId], references: [id]) // 1-to-1: PaymentInfo belongs to one Customer
}

model Payment {
  id           Int    @id @default(autoincrement())
  customerId   Int
  amount       Float
  status       PaymentStatus
  provider     String? // e.g., "stripe", "paypal"
  methodToken  String? // optional: the token used for this specific payment
  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt

  customer     Customer   @relation(fields: [customerId], references: [id]) // many-to-1: Many Payments belong to one Customer
  orders       Order[]   // One payment -> many orders
}

model Location {
  id         Int      @id @default(autoincrement())
  address    String
  city       String
  province   String
  country    String
  postalCode String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt

  customer   Customer?   // optional back relation, 1-to-1 with Customer
  restaurant Restaurant? // optional back relation, 1-to-1 with Restaurant
}

// Many-to-many join table for customer favorites restaurants
model FavoriteRestaurant {
  customerId   Int
  restaurantId Int

  customer    Customer    @relation(fields: [customerId], references: [id])
  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id])

  @@id([customerId, restaurantId])
}

model NotificationSetting {
  id           Int       @id @default(autoincrement())
  customerId   Int    @unique
  // use AWS SES type 
  foodDelivered Boolean   @default(false)
  newMenuItemInFavoriteRest  Boolean   @default(false)
  // use AWS SNS type 
  subscribeApp  Boolean   @default(false)

  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt

  customer        Customer  @relation(fields: [customerId], references: [id]) // 1-to-1: NotificationSetting belongs to one Customer
}

model Notification {
  id           Int       @id @default(autoincrement())
  customerId   Int
  type         NotificationType
  message      String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime @updatedAt

  customer     Customer  @relation(fields: [customerId], references: [id]) // many-to-1: many notifications per customer
}